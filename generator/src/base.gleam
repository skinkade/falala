import gleam/int
import gleam_community/colour.{type Color}
import lustre/attribute.{type Attribute, class, style}
import lustre/element.{type Element}
import lustre/element/html

/// Renders a set of FontAwesome attributes to a glyph element
pub fn render(attrs: List(Attribute(a))) -> Element(a) {
  html.i(attrs, [])
}

//
// --- Variants ---
//

pub fn set_variant_solid(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-solid"), ..attrs]
}

pub fn set_variant_regular(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-regular"), ..attrs]
}

pub fn set_variant_light(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-light"), ..attrs]
}

/// To be used with `primary_color()` and `secondary_color()`
pub fn set_variant_duotone(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-duotone"), ..attrs]
}

pub fn set_variant_thin(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-thin"), ..attrs]
}

pub fn set_color(attrs: List(Attribute(a)), color: Color) -> List(Attribute(a)) {
  [style([#("color", colour.to_css_rgba_string(color))]), ..attrs]
}

//
// --- Coloration ---
//

/// Set primary color of duotone variant
pub fn set_primary_color(
  attrs: List(Attribute(a)),
  color: Color,
) -> List(Attribute(a)) {
  [style([#("--fa-primary-color", colour.to_css_rgba_string(color))]), ..attrs]
}

/// Set secondary color of duotone variant
pub fn set_secondary_color(
  attrs: List(Attribute(a)),
  color: Color,
) -> List(Attribute(a)) {
  [
    style([#("--fa-secondary-color", colour.to_css_rgba_string(color))]),
    ..attrs
  ]
}

//
// --- Rotation ---
//

pub fn set_rotation(
  attrs: List(Attribute(a)),
  degrees: Int,
) -> List(Attribute(a)) {
  [
    class("fa-rotate-by"),
    style([#("--fa-rotate-angle", int.to_string(degrees) <> "deg")]),
    ..attrs
  ]
}

//
// --- Sizing ---
//

pub fn set_size_2xs(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-2xs"), ..attrs]
}

pub fn set_size_xs(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-xs"), ..attrs]
}

pub fn set_size_sm(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-sm"), ..attrs]
}

pub fn set_size_lg(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-lg"), ..attrs]
}

pub fn set_size_xl(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-xl"), ..attrs]
}

pub fn set_size_2xl(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-2xl"), ..attrs]
}

//
// --- Flip ---
//

pub fn set_flip_horizontal(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-flip-horizontal"), ..attrs]
}

pub fn set_flip_vertical(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-flip-vertical"), ..attrs]
}

pub fn flip_both(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-flip-both"), ..attrs]
}

//
// --- Animations ---
//

pub fn set_animation_beat(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-beat"), ..attrs]
}

pub fn set_animation_beat_fade(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-beat-fade"), ..attrs]
}

pub fn set_animation_bounce(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-bounce"), ..attrs]
}

pub fn set_animation_fade(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-fade"), ..attrs]
}

pub fn set_animation_flip(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-flip"), ..attrs]
}

pub fn set_animation_shake(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-shake"), ..attrs]
}

pub fn set_animation_spin(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-spin"), ..attrs]
}

pub fn set_animation_spin_reverse(
  attrs: List(Attribute(a)),
) -> List(Attribute(a)) {
  [class("fa-spin fa-spin-reverse"), ..attrs]
}

pub fn set_animation_spin_pulse(attrs: List(Attribute(a))) -> List(Attribute(a)) {
  [class("fa-spin-pulse"), ..attrs]
}
//
// --- Glyphs (autogenerated) ---
//
